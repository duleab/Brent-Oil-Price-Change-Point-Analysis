[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "brent-oil-changepoint-analysis"
version = "1.0.0"
description = "Bayesian Change Point Detection and Statistical Analysis of Brent Oil Prices"
readme = "README.md"
requires-python = ">=3.8"
license = {text = "MIT"}
authors = [
    {name = "10 Academy", email = "info@10academy.org"},
]
maintainers = [
    {name = "10 Academy", email = "info@10academy.org"},
]
keywords = [
    "bayesian",
    "change-point-detection",
    "time-series",
    "oil-prices",
    "statistical-analysis",
    "pymc",
    "dashboard",
    "visualization"
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Science/Research",
    "Intended Audience :: Financial and Insurance Industry",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Topic :: Scientific/Engineering :: Information Analysis",
    "Topic :: Office/Business :: Financial",
    "Topic :: Scientific/Engineering :: Mathematics",
    "Topic :: Scientific/Engineering :: Visualization",
]
dependencies = [
    "numpy>=1.21.0",
    "pandas>=1.3.0",
    "matplotlib>=3.4.0",
    "seaborn>=0.11.0",
    "plotly>=5.0.0",
    "scipy>=1.7.0",
    "scikit-learn>=1.0.0",
    "pymc>=4.0.0",
    "arviz>=0.12.0",
    "ruptures>=1.1.0",
    "flask>=2.0.0",
    "flask-cors>=3.0.0",
    "pyyaml>=6.0",
    "python-dotenv>=0.19.0",
    "requests>=2.25.0",
    "click>=8.0.0",
    "rich>=12.0.0",
    "structlog>=22.0.0",
    "pydantic>=1.8.0",
    "fastapi>=0.68.0",
    "uvicorn>=0.15.0",
    "redis>=4.0.0",
    "celery>=5.2.0",
    "sqlalchemy>=1.4.0",
    "alembic>=1.7.0",
    "psycopg2-binary>=2.9.0",
    "gunicorn>=20.1.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "pytest-xdist>=3.3.1",
    "pytest-mock>=3.11.1",
    "pytest-asyncio>=0.21.1",
    "pytest-benchmark>=4.0.0",
    "black>=23.7.0",
    "flake8>=6.0.0",
    "flake8-docstrings>=1.7.0",
    "isort>=5.12.0",
    "mypy>=1.5.0",
    "bandit>=1.7.5",
    "safety>=2.3.5",
    "pre-commit>=3.3.3",
    "sphinx>=7.1.0",
    "sphinx-rtd-theme>=1.3.0",
    "myst-parser>=2.0.0",
    "nbval>=0.10.0",
    "jupyter>=1.0.0",
    "jupyterlab>=4.0.0",
    "ipywidgets>=8.1.0",
    "memory-profiler>=0.61.0",
    "line-profiler>=4.1.0",
    "locust>=2.16.1",
    "httpx>=0.24.1",
    "requests-mock>=1.11.0",
    "factory-boy>=3.3.0",
    "faker>=19.3.0",
]
docs = [
    "sphinx>=7.1.0",
    "sphinx-rtd-theme>=1.3.0",
    "sphinx-autodoc-typehints>=1.24.0",
    "myst-parser>=2.0.0",
    "sphinx-copybutton>=0.5.2",
    "sphinx-tabs>=3.4.1",
    "sphinx-autobuild>=2021.3.14",
]
testing = [
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "pytest-xdist>=3.3.1",
    "pytest-mock>=3.11.1",
    "pytest-asyncio>=0.21.1",
    "pytest-benchmark>=4.0.0",
    "pytest-html>=3.2.0",
    "nbval>=0.10.0",
    "coverage[toml]>=7.2.7",
    "hypothesis>=6.82.0",
    "factory-boy>=3.3.0",
    "faker>=19.3.0",
    "responses>=0.23.1",
    "freezegun>=1.2.2",
]
quality = [
    "black>=23.7.0",
    "flake8>=6.0.0",
    "flake8-docstrings>=1.7.0",
    "flake8-import-order>=0.18.2",
    "flake8-bugbear>=23.7.10",
    "isort>=5.12.0",
    "mypy>=1.5.0",
    "bandit>=1.7.5",
    "safety>=2.3.5",
    "pre-commit>=3.3.3",
    "autoflake>=2.2.0",
]
performance = [
    "memory-profiler>=0.61.0",
    "line-profiler>=4.1.0",
    "py-spy>=0.3.14",
    "snakeviz>=2.2.0",
    "locust>=2.16.1",
    "pytest-benchmark>=4.0.0",
]
all = [
    "brent-oil-changepoint-analysis[dev,docs,testing,quality,performance]"
]

[project.urls]
Homepage = "https://github.com/10academy/brent-oil-changepoint-analysis"
Documentation = "https://brent-oil-changepoint-analysis.readthedocs.io/"
Repository = "https://github.com/10academy/brent-oil-changepoint-analysis.git"
"Bug Tracker" = "https://github.com/10academy/brent-oil-changepoint-analysis/issues"
Changelog = "https://github.com/10academy/brent-oil-changepoint-analysis/blob/main/CHANGELOG.md"

[project.scripts]
brent-analysis = "src.cli:main"
brent-dashboard = "dashboard.backend.app:main"
brent-setup = "setup:main"

[tool.setuptools.packages.find]
where = ["src", "dashboard"]
include = ["src*", "dashboard*"]
exclude = ["tests*"]

[tool.setuptools.package-data]
"*" = ["*.yaml", "*.yml", "*.json", "*.csv", "*.txt", "*.md"]

# Black configuration
[tool.black]
line-length = 88
target-version = ['py38', 'py39', 'py310', 'py311']
include = '\.pyi?$'
extend-exclude = '''
(
  /(
      \.eggs
    | \.git
    | \.hg
    | \.mypy_cache
    | \.tox
    | \.venv
    | _build
    | buck-out
    | build
    | dist
    | node_modules
  )/
)
'''

# isort configuration
[tool.isort]
profile = "black"
line_length = 88
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
src_paths = ["src", "dashboard", "tests"]
skip_glob = ["**/node_modules/**", "**/venv/**", "**/env/**"]
known_first_party = ["src", "dashboard"]
known_third_party = [
    "numpy", "pandas", "matplotlib", "seaborn", "plotly", "scipy",
    "sklearn", "pymc", "arviz", "ruptures", "flask", "fastapi",
    "pydantic", "click", "rich", "structlog", "pytest", "hypothesis"
]

# MyPy configuration
[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true
show_column_numbers = true
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = [
    "pymc.*",
    "arviz.*",
    "ruptures.*",
    "plotly.*",
    "seaborn.*",
    "matplotlib.*",
    "scipy.*",
    "sklearn.*",
    "pandas.*",
    "numpy.*"
]
ignore_missing_imports = true

# Pytest configuration
[tool.pytest.ini_options]
minversion = "7.0"
addopts = """
    -ra
    --strict-markers
    --strict-config
    --cov=src
    --cov=dashboard
    --cov-report=term-missing
    --cov-report=html:htmlcov
    --cov-report=xml
    --cov-fail-under=80
    --durations=10
    -p no:warnings
"""
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m "not slow"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "api: marks tests as API tests",
    "frontend: marks tests as frontend tests",
    "backend: marks tests as backend tests",
    "notebook: marks tests as notebook tests",
    "performance: marks tests as performance tests",
    "security: marks tests as security tests",
]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
    "ignore::FutureWarning",
]

# Coverage configuration
[tool.coverage.run]
source = ["src", "dashboard"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/venv/*",
    "*/env/*",
    "*/node_modules/*",
    "setup.py",
    "conftest.py",
]
branch = true
parallel = true

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\bProtocol\):",
    "@(abc\.)?abstractmethod",
]
ignore_errors = true
show_missing = true
skip_covered = false
skip_empty = false
sort = "Cover"

[tool.coverage.html]
directory = "htmlcov"

[tool.coverage.xml]
output = "coverage.xml"

# Bandit security linter configuration
[tool.bandit]
exclude_dirs = ["tests", "venv", "env", "node_modules"]
skips = ["B101", "B601"]

# Flake8 configuration (in setup.cfg format)
[tool.flake8]
max-line-length = 88
max-complexity = 10
select = ["E", "W", "F", "C"]
ignore = [
    "E203",  # whitespace before ':' (conflicts with black)
    "E501",  # line too long (handled by black)
    "W503",  # line break before binary operator (conflicts with black)
    "F401",  # imported but unused (handled by autoflake)
]
exclude = [
    ".git",
    "__pycache__",
    "build",
    "dist",
    ".eggs",
    "*.egg-info",
    ".venv",
    "venv",
    "env",
    "node_modules",
    ".tox",
    ".mypy_cache",
    ".pytest_cache",
]
per-file-ignores = [
    "__init__.py:F401",
    "tests/*:D",
]
docstring-convention = "google"

# Autoflake configuration
[tool.autoflake]
remove-all-unused-imports = true
remove-unused-variables = true
remove-duplicate-keys = true
expand-star-imports = true
ignore-init-module-imports = true

# Commitizen configuration
[tool.commitizen]
name = "cz_conventional_commits"
version = "1.0.0"
tag_format = "v$version"
version_files = [
    "pyproject.toml:version",
    "src/__init__.py:__version__",
    "dashboard/__init__.py:__version__",
]
update_changelog_on_bump = true
changelog_file = "CHANGELOG.md"
changelog_format = "conventional"
changelog_incremental = true

# Semantic release configuration
[tool.semantic_release]
version_variable = "pyproject.toml:version"
version_pattern = [
    "src/__init__.py:__version__",
    "dashboard/__init__.py:__version__",
]
version_toml = "pyproject.toml:project.version"
changelog_file = "CHANGELOG.md"
changelog_sections = "feature,fix,breaking,documentation,performance"
upload_to_pypi = false
upload_to_release = true
build_command = "pip install build && python -m build"

# Ruff configuration (alternative to flake8)
[tool.ruff]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
    "ARG", # flake8-unused-arguments
    "SIM", # flake8-simplify
    "ICN", # flake8-import-conventions
    "PIE", # flake8-pie
    "T20", # flake8-print
    "PYI", # flake8-pyi
    "PT",  # flake8-pytest-style
    "Q",   # flake8-quotes
    "RSE", # flake8-raise
    "RET", # flake8-return
    "TID", # flake8-tidy-imports
    "TCH", # flake8-type-checking
    "RUF", # Ruff-specific rules
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
    "RUF012", # Mutable class attributes should be annotated with `typing.ClassVar`
]
line-length = 88
target-version = "py38"
fix = true
show-fixes = true

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]
"tests/*" = ["T20", "ARG", "PT"]
"conftest.py" = ["F401"]
"setup.py" = ["T20"]

[tool.ruff.isort]
known-first-party = ["src", "dashboard"]
known-third-party = [
    "numpy", "pandas", "matplotlib", "seaborn", "plotly", "scipy",
    "sklearn", "pymc", "arviz", "ruptures", "flask", "fastapi",
    "pydantic", "click", "rich", "structlog", "pytest", "hypothesis"
]

[tool.ruff.mccabe]
max-complexity = 10

# Pre-commit hooks configuration
[tool.pre-commit]
repos = [
    {
        repo = "https://github.com/pre-commit/pre-commit-hooks",
        rev = "v4.4.0",
        hooks = [
            {id = "trailing-whitespace"},
            {id = "end-of-file-fixer"},
            {id = "check-yaml"},
            {id = "check-added-large-files"},
            {id = "check-merge-conflict"},
            {id = "debug-statements"},
            {id = "check-docstring-first"},
        ]
    },
    {
        repo = "https://github.com/psf/black",
        rev = "23.7.0",
        hooks = [{id = "black"}]
    },
    {
        repo = "https://github.com/pycqa/isort",
        rev = "5.12.0",
        hooks = [{id = "isort"}]
    },
    {
        repo = "https://github.com/pycqa/flake8",
        rev = "6.0.0",
        hooks = [{id = "flake8"}]
    },
    {
        repo = "https://github.com/pre-commit/mirrors-mypy",
        rev = "v1.5.0",
        hooks = [{id = "mypy", additional_dependencies = ["types-all"]}]
    },
    {
        repo = "https://github.com/PyCQA/bandit",
        rev = "1.7.5",
        hooks = [{id = "bandit", args = ["-r", "src", "dashboard"]}]
    },
]

# Documentation configuration
[tool.sphinx]
source-dir = "docs"
build-dir = "docs/_build"
all_files = 1

# Performance monitoring
[tool.py-spy]
duration = 60
rate = 100
subprocesses = true

# Memory profiling
[tool.memory-profiler]
precision = 3
backend = "psutil"

# Load testing
[tool.locust]
host = "http://localhost:5000"
users = 100
spawn-rate = 10
run-time = "5m"

# Dependency management
[tool.pip-tools]
generate-hashes = true
allow-unsafe = true
upgrade = true

# Security scanning
[tool.safety]
full-report = true
short-report = false
output = "json"

# Code complexity analysis
[tool.radon]
cc_min = "B"
mi_min = "B"

# License checking
[tool.licensecheck]
zero = true
ignore-packages = ["setuptools", "pip", "wheel"]

# Notebook configuration
[tool.nbqa.config]
black = "pyproject.toml"
isort = "pyproject.toml"
flake8 = "setup.cfg"
mypy = "pyproject.toml"

[tool.nbqa.mutate]
black = 1
isort = 1
autoflake = 1

[tool.nbqa.shell]
black = "black --check --diff {filename}"
isort = "isort --check-only --diff {filename}"
flake8 = "flake8 {filename}"
mypy = "mypy {filename}"

# Environment configuration
[tool.dotenv]
path = ".env"
override = false
interpolate = true

# Docker configuration
[tool.docker]
image = "brent-oil-analysis"
tag = "latest"
platform = "linux/amd64"

# Monitoring configuration
[tool.prometheus]
port = 9090
metrics_path = "/metrics"

[tool.grafana]
port = 3000
admin_user = "admin"
admin_password = "admin"

# Database configuration
[tool.alembic]
script_location = "migrations"
file_template = "%%(year)d_%%(month).2d_%%(day).2d_%%(hour).2d%%(minute).2d-%%(rev)s_%%(slug)s"

# API configuration
[tool.fastapi]
title = "Brent Oil Price Analysis API"
description = "API for Bayesian Change Point Detection and Statistical Analysis"
version = "1.0.0"
openapi_url = "/api/v1/openapi.json"
docs_url = "/docs"
redoc_url = "/redoc"

# Celery configuration
[tool.celery]
broker_url = "redis://localhost:6379/0"
result_backend = "redis://localhost:6379/0"
task_serializer = "json"
result_serializer = "json"
accept_content = ["json"]
timezone = "UTC"
enable_utc = true

# Redis configuration
[tool.redis]
host = "localhost"
port = 6379
db = 0
decode_responses = true

# Logging configuration
[tool.structlog]
processors = [
    "structlog.stdlib.filter_by_level",
    "structlog.stdlib.add_logger_name",
    "structlog.stdlib.add_log_level",
    "structlog.stdlib.PositionalArgumentsFormatter",
    "structlog.processors.TimeStamper",
    "structlog.processors.StackInfoRenderer",
    "structlog.processors.format_exc_info",
    "structlog.processors.UnicodeDecoder",
    "structlog.processors.JSONRenderer"
]
wrapper_class = "structlog.stdlib.BoundLogger"
logger_factory = "structlog.stdlib.LoggerFactory"
cache_logger_on_first_use = true

# Project metadata
[tool.project-metadata]
created = "2024-01-01"
last_updated = "2024-01-01"
maintainer = "10 Academy"
status = "active"
complexity = "high"
tags = ["bayesian", "time-series", "finance", "dashboard", "api"]